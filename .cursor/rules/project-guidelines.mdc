---
alwaysApply: true
---

# Руководство по проекту

Этот проект использует современный стек: React + TypeScript, React Router v6, Shadcn UI, Tailwind CSS и Zustand. Цель — писать чистый, читаемый, типобезопасный код с упором на осмысленные имена, простую архитектуру и производительность.

Ключевые точки входа и директории:

- [src/main.tsx](mdc:src/main.tsx) — инициализация приложения
- [src/routes/index.tsx](mdc:src/routes/index.tsx) — маршрутизация (React Router v6)
- [src/App.tsx](mdc:src/App.tsx) — корневой компонент
- [src/components/ui/button.tsx](mdc:src/components/ui/button.tsx) — UI-примитивы (Shadcn UI)
- [src/lib/api.ts](mdc:src/lib/api.ts) — API-вызовы
- [src/store/auth.ts](mdc:src/store/auth.ts) — Zustand сто́ры (пример)

Общие принципы кода:

- Пишите полный, рабочий код; избегайте неполных реализаций и заглушек
- Используйте осмысленные имена: функции — глаголы/фразы-действия, переменные — существительные/фразы-сущности
- Предпочитайте ранние возвраты и неглубокую вложенность (≤2–3 уровня)
- Ошибки обрабатывайте осмысленно; не глушите исключения
- Держите компоненты «чистыми»: побочные эффекты — в хуках, бизнес-логика — в сторах/сервисах

TypeScript и архитектура:

- Экспортируемые функции/компоненты должны иметь явные сигнатуры типов
- Избегайте any/unknown без необходимости; не используйте небезопасные приведения
- Общие утилиты — в [src/lib](mdc:src/lib), переиспользуемые компоненты — в [src/components](mdc:src/components), страницы — в [src/pages](mdc:src/pages)
- Состояние храните в Zustand сторах в [src/store](mdc:src/store); локальный UI-стейт — в компонентах

UI и стили:

- Используйте Tailwind утилиты для стилей, Shadcn UI компоненты как основу
- Не переизобретайте UI-примитивы — добавляйте новые в [src/components/ui](mdc:src/components/ui) при необходимости

Маршрутизация:

- Новые страницы регистрируйте в [src/routes/index.tsx](mdc:src/routes/index.tsx); соблюдайте паттерны React Router v6

Производительность:

- Мемоизируйте тяжёлые вычисления/рендеры (useMemo/useCallback)
- Избегайте лишних ререндеров за счёт правильной структуры стора и селекторов

## Конвенция коммитов (Conventional Commits)

Используйте формат: `<type>(<scope>): <subject>`

- `feat`: новая функциональность
- `fix`: исправление бага
- `docs`: документация (README, правила, спецификации)
- `style`: правки без изменения логики (форматирование, пробелы)
- `refactor`: переработка без изменения поведения
- `perf`: оптимизация производительности
- `test`: тесты
- `build`: сборка, инструменты сборки, конфиги
- `ci`: CI/CD
- `chore`: прочие задачи (например, обновление зависимостей)
- `revert`: откат изменений

Рекомендуемые `scope`: `deps`, `cursor`, `ui`, `store`, `routes`, `admin`, `hooks`, `types`, `build`.

Примеры:

- `chore(deps): npm audit fix`
- `docs(cursor): add project guidelines and TS/React style rules`

Короткая форма в одну строку (менее канонично, допустимо для мелких задач):

- Разрешается объединять несколько коротких изменений в один заголовок, разделяя `;`.
- Пример: `chore(deps): npm audit fix; docs(cursor): add Cursor rules`
- Предпочтительно разбивать на отдельные коммиты по типам.
